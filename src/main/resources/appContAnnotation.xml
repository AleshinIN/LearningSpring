<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
<!--Почему-то жестко конфликтует, когда создаёшь в одном конфигурационном файле бины разным способом(XML и аннотации) -->

<!--lk9_10_11_12 Использование аннотаций + XML для создания объекта и зависимостей-->
    <!--9 Component - Создание бинов через аннотацию. id бина = имени класса с маленькой буквы-->
    <context:component-scan base-package="springcourse.alishev.lk9_10_11_12" /> <!--указываем папку для сканирования всех вайлов на наличие аннотации-->
    <!--10 Autowired - cоздание зависимостей через аннотацию. Выбирает из всех бинов только тот, что подходит по типу и передает его.
        Можно пометить:
        * поле - зависимость будет внедрена через рефлексию
        * сеттер - имя может быть любым(даже не начинаться на set)
        * конструктор
        Если подходящего бина нет, то ошибка. Если подходящих бинов много, то нужно использовать Qualifier.-->
    <!--11 Qualifier("classicalMusicDZ") - указывает id бина, который хотим внедрить. Если указываем для конструктора, то эту аннотацию нужно писать перед объявлением зависимости(не перед конструктором)-->
    <!--12 Value("${musicPlayer.volume}") - вносит в переменную значение из файла-->
    <context:property-placeholder location="classpath:musicCase.properties"/> <!--указываем из какого файла брать значения-->
    <!-- Scope("singleton") - способы создания бина.
        * Singletone - используется по умолчанию. Бины создаются единожды
        * Prototype - возвращает ссылку на разные объекты. Создаются новые бины при вызове getBean-->
    <!-- Эти аннотации были удалены из Java 11, нужно их подгружать вручную через pom.xml
        * PustConstruct - инициализация бина. Выполнить какую-то логику до момента создания объекта
        * PreDestroy - выполнить какое-то действие с бином перед завершением Spring приложения. К примеру, закрытие доступа к БД-->
</beans>